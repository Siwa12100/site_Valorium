kind: pipeline
type: docker
name: build-and-deploy-siteValorium-main

trigger:
  branch:
    - main
  event:
    - push

volumes:
  - name: shared-volume
    temp: {}

steps:
  - name: "🛠 build"
    image: mcr.microsoft.com/dotnet/sdk:7.0
    commands:
      - echo "🛠 [INFO] Build du projet siteValorium (.NET 7)..."
      - dotnet publish ./siteValorium/siteValorium.csproj -c Release -o out || {
          echo "❌ [ERROR] Le build a échoué.";
          exit 1;
        }
      - echo "✅ [SUCCESS] Build terminé."

  - name: "🧪 tests-unitaires"
    image: mcr.microsoft.com/dotnet/sdk:7.0
    volumes:
      - name: shared-volume
        path: /coverage
    commands:
      - echo "🧪 [INFO] Lancement des tests avec couverture..."
      - dotnet test ./siteValorium.sln --configuration Release --collect:"XPlat Code Coverage" --results-directory /coverage --logger "console;verbosity=normal" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover || { echo "❌ [ERROR] Les tests ont échoué."; exit 1; }
      - echo "🔍 [DEBUG] Fichier opencover.xml généré (début) :"
      - COVERAGE_FILE=$(find /coverage -name *.opencover.xml | head -n 1)
      - cat "$COVERAGE_FILE" | head -n 30
      - echo "📦 [INFO] Renommage pour Sonar..."
      - mv "$COVERAGE_FILE" /coverage/opencover.xml
      - echo "✅ [SUCCESS] Tests terminés avec couverture."

  - name: "📊 analyse-sonar"
    image: mcr.microsoft.com/dotnet/sdk:7.0
    environment:
      SONAR_HOST_URL: https://sonar.davalada.valorium-mc.fr
      SONAR_TOKEN:
        from_secret: SONAR_TOKEN
    volumes:
      - name: shared-volume
        path: /coverage
    commands:
      - echo "📊 [INFO] Initialisation de l'analyse Sonar..."
      - apt-get update && apt-get install -y openjdk-17-jre
      - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 && export PATH=$JAVA_HOME/bin:$PATH
      - dotnet tool install --global dotnet-sonarscanner
      - export PATH="$PATH:/root/.dotnet/tools"
      - echo "🔍 [DEBUG] Vérification du fichier opencover.xml avant analyse..."
      - head -n 30 /coverage/opencover.xml
      - dotnet-sonarscanner begin /k:site-valorium /d:sonar.host.url=$SONAR_HOST_URL /d:sonar.login=$SONAR_TOKEN /d:sonar.cs.opencover.reportsPaths=/coverage/**/opencover.xml /d:sonar.sources=./siteValorium
      - dotnet build ./siteValorium/siteValorium.csproj --no-incremental
      - dotnet-sonarscanner end /d:sonar.login=$SONAR_TOKEN
      - echo "✅ [SUCCESS] Analyse Sonar terminée."

  - name: "🐳 build-et-push-image"
    image: plugins/docker
    depends_on: [ "🛠 build", "🧪 tests-unitaires" ]
    settings:
      registry: registry.devalada.valorium-mc.fr
      repo: registry.devalada.valorium-mc.fr/site-valorium-main
      username:
        from_secret: DOCKER_USERNAME
      password:
        from_secret: DOCKER_PASSWORD
      dockerfile: Dockerfile
      tags:
        - latest

  - name: "🚀 deploiement-vps-main"
    image: appleboy/drone-ssh
    depends_on:
      - "🐳 build-et-push-image"
    settings:
      host: ecirada.valorium-mc.fr
      username:
        from_secret: SSH_USER
      ssh_key:
        from_secret: SSH_PRIVATE_KEY
      port: 22
      script:
        - echo "🚀 [INFO] Déploiement en cours..."
        - cd deploiements/site-valorium/site-valorium-main
        - echo "🛑 [INFO] Arrêt de l'ancien service..."
        - docker compose down
        - echo "📥 [INFO] Pull de la nouvelle image..."
        - docker compose pull
        - echo "🚀 [INFO] Relancement du service..."
        - docker compose up -d
        - sleep 5
        - docker ps | grep site-valorium-main || {
            echo "❌ [ERROR] Le service ne tourne pas !";
            exit 1;
          }
        - echo "✅ [SUCCESS] Déploiement terminé."